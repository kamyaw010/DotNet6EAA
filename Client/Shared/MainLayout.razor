@using Common
@inject HttpUtil _httpUtil
@using System.Runtime.InteropServices
@inherits LayoutComponentBase
@inject ITelerikStringLocalizer L
@inject ILocalStorageService LocalStorage

@* @Body and other code will be present here depending on your project *@


<TelerikRootComponent >
    <div class="header">
        <div class="nav-container">
            <div class="menu-button">
                <TelerikButton Icon="menu" OnClick="@ToggleMenuDrawer" />
            </div>
            <table width="100%" table-layout="fixed">
                <tr>
                    <td class="title" width="62%">
                        <h1>.NET 6 Framework</h1>
                    </td>
                    <td class="information" width="8%">
                      @if (@_RuntimeInfo?.Environment != "Production") {
                        <label>@_RuntimeInfo?.Environment</label>
                      }
                    </td>                
                    <td class="information" width="10%">
                        <label>(@_RuntimeInfo?.Build)</label>
                    </td>
                    <td class="information"  width="20%">
                        <label>@_RuntimeInfo?.User</label>
                    </td>
                </tr>
            </table>
            <div class="settings">
                <TelerikButton Icon="gear" />
            </div>
        </div>
    </div>
    <TelerikDrawer @ref="MenuDrawer"
                   Expanded="@Expanded"
                   ExpandedChanged="((bool newValue) => ExpandedChangedHandler(newValue))"
                   Width="280px" Data="DrawerMenu.MenuItems" Mode="DrawerMode.Push" Position="DrawerPosition.Left" >
        <Template>
            <DrawTemplate Data="context"></DrawTemplate>
        </Template>
        <DrawerContent>
            <div class="contentbody">
                @Body
</div>
        </DrawerContent>
    </TelerikDrawer>
</TelerikRootComponent>


@code {
    private RuntimeInfo _RuntimeInfo;
    bool Expanded { get; set; }
    TelerikDrawer<DrawerItem> MenuDrawer { get; set; }
    protected override async Task OnInitializedAsync() {
        await SetDrawerState();
        _RuntimeInfo = await _httpUtil.GetFromJsonAsync<RuntimeInfo>("RuntimeInfo");
        if (_RuntimeInfo.SQLConnection == null) { _RuntimeInfo.SQLConnection = "N/A"; }
        if (_RuntimeInfo.User == null) { _RuntimeInfo.User = "N/A"; }
    }
    #region Menu Drawer
    async Task SetDrawerState() {
        var hasKey = await LocalStorage.ContainKeyAsync("drawerState");
        if (hasKey) {
            Expanded = await LocalStorage.GetItemAsync<bool>("drawerState");
        } else {
            Expanded = true;
        }
    }
    async Task ToggleMenuDrawer() {
        if (Expanded) {
            await MenuDrawer.CollapseAsync();
        } else {
            await MenuDrawer.ExpandAsync();
        }
    }
    async Task ExpandedChangedHandler(bool value) {
        Expanded = value;
        await LocalStorage.SetItemAsync("drawerState", value);
    }
    #endregion
}
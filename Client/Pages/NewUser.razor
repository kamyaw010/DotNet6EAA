@page "/adduser"
@using Common.DTOs.Users

@inject HttpClient Http
@inject Util utility

<PageTitle>Add User</PageTitle>

<EditForm OnValidSubmit="@Send"
          Model = "@_newuser">
    <DataAnnotationsValidator />
    <h1>Add New User</h1>
    <hr />
    <ValidationSummary />
    <table class="table">
    <tbody>
        <tr>
            <td>User name:</td>
            <td><input @bind="_newuser.UserName" /></td>
        </tr>
        <tr>
            <td>FirstName:</td>
            <td><input @bind="_newuser.FirstName" /></td>
        </tr>
        <tr>
            <td>LastName:</td>
            <td><input @bind="_newuser.LastName" /></td>
        </tr>
        <tr>
            <td>Address:</td>
            <td><input @bind="_newuser.Address" /></td>
        </tr>
        <tr>
            <td>BirthDate (yyyy-mm-dd):</td>
            <td><InputDate @bind-Value="_newuser.BirthDate" /></td>
        </tr>
        <tr>
            <td>Department:</td>
            <InputSelect id="department" @bind-Value="_newuser.DepartmentId">
                @foreach (var dept in Enums.Departments)
                {
                    <option value="@dept.Id">@dept.Name</option>
                }
            </InputSelect>
        </tr>
        <tr>
            <td>Coefficients Salary:</td>
            <td><input @bind="_newuser.CoefficientsSalary" /></td>
        </tr>
        <tr>
            <td colspan="2"><button type="submit" disabled=@_completed>Submit</button></td>
        </tr>
    </tbody>
</table>
</EditForm>
<div class="spinner" hidden=@_notspinning ></div>

<p hidden=@(_message == "") style="white-space: pre-line" >@_message</p>

@code {
    private AddUserRequest _newuser;
    private string _message;
    private bool _notspinning = true;
    private bool _completed = false;

    protected override async Task OnInitializedAsync()
    {
        _newuser = new AddUserRequest();
        _newuser.DepartmentId = 1;
    }
    async Task Send()
    {
        _message = "";
        _completed = true;
        _notspinning = false;
        await utility.RefreshToken();
        var result = await Http.PostAsJsonAsync("users", _newuser);
        _notspinning = true;
        if (result.IsSuccessStatusCode)
        {
            AddUserResponse response = await result.Content.ReadFromJsonAsync<AddUserResponse>();
            _message = "Created ID:" + response.Id 
                + "\nUser Name=" + response.UserName 
                + "\nin Department - " + response.DepartmentName;
        } else {
            _message = "Error: " + await result.Content.ReadAsStringAsync();
        }
    }
}

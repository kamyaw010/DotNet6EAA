@page "/adduser"
@using Common

@inject HttpUtil _httpUtil

<TelerikForm Model="@_newuser"
                         Width="auto"
                         >
                <FormItems>
                    <FormItem LabelText="User Name" Field="@nameof(_newuser.UserName)" ></FormItem>
                    <FormItem LabelText="First Name" Field="@nameof(_newuser.FirstName)"></FormItem>
                    <FormItem LabelText="Last Name" Field="@nameof(_newuser.LastName)"></FormItem>
                    <FormItem LabelText="Address" Field="@nameof(_newuser.Address)"></FormItem>
                    <FormItem LabelText="BirthDate" Field="@nameof(_newuser.BirthDate)"></FormItem>
                    

                    <FormItem Field="@nameof(_newuser.DepartmentName)">
                        <Template>
                            <label class="k-label k-form-label">Department:</label>
                            <TelerikDropDownList Data="@Enums.Departments"
                                                 @bind-Value="@_newuser.DepartmentName"
                                                 TextField="Name"
                                                 ValueField="Name"
                                                 DefaultText="Select"
                                                 Id="DepartmentName"
                                                 Width="100%">
                                <DropDownListSettings>
                                    <DropDownListPopupSettings Height="auto"></DropDownListPopupSettings>
                                </DropDownListSettings>
                            </TelerikDropDownList>
                        </Template>
                    </FormItem>
                    <FormItem LabelText="Coefficients Salary" Field="@nameof(_newuser.CoefficientsSalary)"></FormItem>
                </FormItems>
                <FormButtons>
                    <TelerikButton Icon="Add" ButtonType="ButtonType.Button" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)" OnClick="@Send">Submit</TelerikButton>
                </FormButtons>
            </TelerikForm>

@*<EditForm OnValidSubmit="@Send"
          Model = "@_newuser">
    <DataAnnotationsValidator />
    <h1>Add New User</h1>
    <hr />
    <ValidationSummary />
    <table class="table">
    <tbody>
        <tr>
            <td>User name:</td>
            <td><input @bind="_newuser.UserName" /></td>
        </tr>
        <tr>
            <td>FirstName:</td>
            <td><input @bind="_newuser.FirstName" /></td>
        </tr>
        <tr>
            <td>LastName:</td>
            <td><input @bind="_newuser.LastName" /></td>
        </tr>
        <tr>
            <td>Address:</td>
            <td><input @bind="_newuser.Address" /></td>
        </tr>
        <tr>
            <td>BirthDate (yyyy-mm-dd):</td>
            <td><InputDate @bind-Value="_newuser.BirthDate" /></td>
        </tr>
        <tr>
            <td>Department:</td>
            <InputSelect id="department" @bind-Value="_newuser.DepartmentName">
                    @foreach (var dept in Enums.Departments) {
                        <option value="@dept.Name">@dept.Name</option>
                    }
            </InputSelect>
        </tr>
        <tr>
            <td>Coefficients Salary:</td>
            <td><input @bind="_newuser.CoefficientsSalary" /></td>
        </tr>
        <tr>
            <td colspan="2"><button type="submit" disabled=@_completed>Submit</button></td>
        </tr>
    </tbody>
</table>
</EditForm>*@
<div class="spinner" hidden=@_notspinning ></div>

<p hidden=@(_message == "") style="white-space: pre-line" >@_message</p>

@code {

    private AddUserRequest _newuser;
    private string _message;
    private bool _notspinning = true;
    private bool _completed = false;

    protected override async Task OnInitializedAsync() {
        _newuser = new AddUserRequest();
        _newuser.DepartmentName = "IT";
    }
    async Task Send() {
        _message = "";
        _completed = true;
        _notspinning = false;
        var result = await _httpUtil.PostAsJsonAsync("users", _newuser);
        _notspinning = true;
        if (result.IsSuccessStatusCode) {
            AddUserResponse response = await result.Content.ReadFromJsonAsync<AddUserResponse>();
            _message = "Created ID:" + response.Id
                + "\nUser Name=" + response.UserName
                + "\nin Department - " + response.DepartmentName;
        } else {
            _message = "Error: " + await result.Content.ReadAsStringAsync();
        }
    }
}
